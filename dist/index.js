var v=Object.defineProperty;var P=s=>v(s,"__esModule",{value:!0});var $=(s,r)=>{P(s);for(var e in r)v(s,e,{get:r[e],enumerable:!0})};var b=(s,r,e)=>new Promise((w,u)=>{var c=a=>{try{g(e.next(a))}catch(t){u(t)}},i=a=>{try{g(e.throw(a))}catch(t){u(t)}},g=a=>a.done?w(a.value):Promise.resolve(a.value).then(c,i);g((e=e.apply(s,r)).next())});$(exports,{default:()=>J});var j=!1,x=s=>{j&&console.log(s)},f;(function(e){e[e.JSON=0]="JSON",e[e.YAML=1]="YAML"})(f||(f={}));function J(w){return b(this,arguments,function*({args:s,imports:r,debug:e}){j=!!e;let{fs:u,YAML:c,dotProp:i,exit:g}=r,{filepath:a,key:t,val:d,type:h}=S(s,g),{format:k,contents:p,input:N}=yield L(a);if(x({filepath:a,key:t,type:h,val:d,format:k}),d){let n;h?h==="number"?n=Number(d):h==="boolean"?n=!d.trim().toLowerCase().match(/false|0|null/):n=d:n=d;let o;if(t.match(/\.\[\]$/)){let l=t.replace(/\.\[\]$/,""),y=i.get(p,l)||[];y.push(n),o=i.set(p,l,y)}else if(t.match(/\.\[0\]$/)){let l=t.replace(/\.\[0\]$/,""),y=i.get(p,l)||[];y.unshift(n),o=i.set(p,l,y)}else o=i.set(p,t,n);let m=k===0?JSON.stringify(o,null,2):c.dump(o);return yield u.writeTextFile(a,m),x(`updated "${t}: ${n}"`),o}else return t?i.get(p,t):N;function L(n){return b(this,null,function*(){let o,m;try{o=yield u.readTextFile(n)}catch(l){if(n.match(/\.json$/))return{input:"{}",contents:{},format:0};if(n.match(/\.(yaml|yml)/))return{input:"",contents:{},format:1};throw l}try{return m=JSON.parse(o),{input:o,contents:m,format:0}}catch(l){return m=c.load(o),{input:o,contents:m,format:1}}})}})}function S(s,r){let[e,w,u,c]=s;return(!e||e==="-h"||e==="--help")&&(console.log(["No-fuss CLI to get/set json/yaml properties in file",""," Usage: jyt <filepath> [dotPath] [val] [type]","","    filepath : must be valid json/yaml files (expects objects)","    dotPath  : a dotted key path 'a.b.c'. When absent, prints the whole file","    val      : if specified, sets the value, else prints value to stdout","    type     : type of 'val' (defaults to string)",""," Examples:","    # get a value","    jyt some/file.json  a.b.c","","    # set a value","    jyt some/file.json  a.b.c 42","","    # push to (end of) array","    jyt some/file.json  a.b.arr.[] 42 number","","    # push to (head of) array","    jyt some/file.json  a.b.arr.[0] false boolean","","    # add a new field (defaults to string)","    jyt some/file.yaml  a.b.d hello","","    # add a new field (defaults to string)","    jyt some/file.yaml  a.b.e world string",""].join(`
`)),r(e?0:1)),{filepath:e,key:w,val:u,type:c}}0&&(module.exports={});
//# sourceMappingURL=index.js.map
